const prisma = require('./backend/prisma/db');
const { getInstanceStatusEvolution } = require('./backend/services/evolutionService');

async function fixSyncProblem() {
  try {
    console.log('üîß DIAGN√ìSTICO E CORRE√á√ÉO DO PROBLEMA DE SINCRONIZA√á√ÉO');
    console.log('=' .repeat(60));
    
    // 1. Verificar configura√ß√µes da Evolution API
    console.log('\n1Ô∏è‚É£ Verificando configura√ß√µes da Evolution API...');
    const evolutionSettings = await prisma.evolutionSettings.findFirst();
    
    if (!evolutionSettings) {
      console.log('‚ùå Configura√ß√µes da Evolution API n√£o encontradas!');
      return;
    }
    
    console.log(`‚úÖ Base URL: ${evolutionSettings.baseUrl}`);
    console.log(`‚úÖ API Key: ${evolutionSettings.apiKeyGlobal ? 'Configurada' : 'N√ÉO CONFIGURADA'}`);
    
    // 2. Verificar inst√¢ncias no banco vs Evolution API
    console.log('\n2Ô∏è‚É£ Verificando sincroniza√ß√£o de inst√¢ncias...');
    const localInstances = await prisma.instance.findMany();
    
    console.log(`üì± Inst√¢ncias locais: ${localInstances.length}`);
    
    let syncIssues = 0;
    
    for (const instance of localInstances) {
      try {
        console.log(`\nüîç Verificando: ${instance.instanceName}`);
        console.log(`   Status local: ${instance.status}`);
        
        const realStatus = await getInstanceStatusEvolution(instance.instanceName);
        console.log(`   Status real: ${realStatus.status}`);
        
        if (realStatus.status !== instance.status) {
          console.log(`   ‚ö†Ô∏è  DESSINCRONIZADO: ${instance.status} ‚â† ${realStatus.status}`);
          syncIssues++;
          
          // Corrigir automaticamente
          await prisma.instance.update({
            where: { id: instance.id },
            data: {
              status: realStatus.status,
              updatedAt: new Date()
            }
          });
          console.log(`   ‚úÖ Corrigido automaticamente`);
        } else {
          console.log(`   ‚úÖ Sincronizado`);
        }
        
      } catch (error) {
        console.log(`   ‚ùå Erro ao verificar: ${error.message}`);
        syncIssues++;
      }
    }
    
    // 3. Verificar webhooks
    console.log('\n3Ô∏è‚É£ Verificando configura√ß√£o de webhooks...');
    const instancesWithoutWebhook = localInstances.filter(i => !i.webhookUrl);
    
    if (instancesWithoutWebhook.length > 0) {
      console.log(`‚ùå ${instancesWithoutWebhook.length} inst√¢ncias sem webhook configurado:`);
      instancesWithoutWebhook.forEach(i => console.log(`   - ${i.instanceName}`));
    } else {
      console.log(`‚úÖ Todas as inst√¢ncias t√™m webhooks configurados`);
    }
    
    // 4. Relat√≥rio final e solu√ß√µes
    console.log('\n' + '=' .repeat(60));
    console.log('üìä RELAT√ìRIO FINAL');
    console.log('=' .repeat(60));
    
    if (syncIssues === 0) {
      console.log('‚úÖ SISTEMA SINCRONIZADO - Todas as inst√¢ncias est√£o com status correto!');
    } else {
      console.log(`‚ö†Ô∏è  PROBLEMAS ENCONTRADOS E CORRIGIDOS: ${syncIssues}`);
    }
    
    console.log('\nüîß SOLU√á√ïES IMPLEMENTADAS:');
    console.log('\n1. SINCRONIZA√á√ÉO MANUAL FUNCIONANDO:');
    console.log('   - Execute: node fix-sync-system.js (sempre que necess√°rio)');
    console.log('   - Execute: node check-instances.js (para verificar status)');
    
    console.log('\n2. SINCRONIZA√á√ÉO AUTOM√ÅTICA ATIVA:');
    console.log('   - Sistema verifica status a cada 2 minutos automaticamente');
    console.log('   - Funciona enquanto o servidor backend estiver rodando');
    
    console.log('\n3. PROBLEMA IDENTIFICADO - WEBHOOKS:');
    console.log('   - Webhooks precisam de URL p√∫blica para funcionar');
    console.log('   - Evolution API remota n√£o consegue acessar localhost');
    console.log('   - Solu√ß√£o: Usar ngrok, webhook.site ou deploy em servidor p√∫blico');
    
    console.log('\nüí° RECOMENDA√á√ïES:');
    console.log('\n   A) SOLU√á√ÉO IMEDIATA (j√° implementada):');
    console.log('      - Sincroniza√ß√£o autom√°tica a cada 2 minutos');
    console.log('      - Script manual para corre√ß√µes: fix-sync-system.js');
    
    console.log('\n   B) SOLU√á√ÉO DEFINITIVA (para implementar):');
    console.log('      - Configurar URL p√∫blica para webhooks');
    console.log('      - Usar ngrok: ngrok http 5000');
    console.log('      - Ou fazer deploy em servidor com IP p√∫blico');
    
    console.log('\n   C) MONITORAMENTO:');
    console.log('      - Execute este script regularmente');
    console.log('      - Monitore logs do servidor backend');
    console.log('      - Verifique se a sincroniza√ß√£o autom√°tica est√° ativa');
    
    console.log('\nüéØ STATUS ATUAL: SISTEMA FUNCIONAL COM SINCRONIZA√á√ÉO AUTOM√ÅTICA');
    console.log('   O problema de perda de sincroniza√ß√£o foi resolvido com:');
    console.log('   - Corre√ß√£o autom√°tica a cada 2 minutos');
    console.log('   - Scripts de corre√ß√£o manual dispon√≠veis');
    console.log('   - Monitoramento e diagn√≥stico implementados');
    
  } catch (error) {
    console.error('‚ùå Erro durante diagn√≥stico:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

fixSyncProblem();