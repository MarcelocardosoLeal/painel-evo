const prisma = require('../prisma/db');

// @desc    Get Evolution API settings (global)
// @route   GET /api/evolution-settings
// @access  Private
const getEvolutionSettings = async (req, res) => {
  try {
    console.log('Buscando configura√ß√µes globais da Evolution API');
    
    const settings = await prisma.evolutionSettings.findFirst();

    if (!settings) {
      console.log('Nenhuma configura√ß√£o global da Evolution API encontrada');
      return res.status(404).json({ 
        message: 'Configura√ß√µes da API Evolution n√£o encontradas.',
        needsConfiguration: true 
      });
    }

    console.log('Configura√ß√µes globais encontradas:', {
      hasBaseUrl: !!settings.baseUrl,
      hasApiKey: !!settings.apiKeyGlobal
    });
    
    res.json(settings);
  } catch (error) {
    console.error('Erro ao buscar configura√ß√µes da API Evolution:', error);
    res.status(500).json({ message: 'Erro do servidor ao buscar configura√ß√µes.' });
  }
};

// @desc    Create or Update Evolution API settings (global)
// @route   POST /api/evolution-settings
// @access  Private (Admin only)
const upsertEvolutionSettings = async (req, res) => {
  console.log('üîÑ [EVOLUTION SETTINGS] Iniciando processo de salvamento');
  console.log('üìù [EVOLUTION SETTINGS] Dados recebidos:', {
    ev_api_url: req.body.ev_api_url ? '***URL_PRESENTE***' : 'VAZIO',
    ev_api_key_global: req.body.ev_api_key_global ? '***CHAVE_PRESENTE***' : 'VAZIO',
    usuario: req.user ? `ID: ${req.user.id}, Admin: ${req.user.isAdmin}` : 'N√ÉO_AUTENTICADO'
  });
  
  const { ev_api_url, ev_api_key_global } = req.body;

  if (!ev_api_url || !ev_api_key_global) {
    console.log('‚ùå [EVOLUTION SETTINGS] Valida√ß√£o falhou - campos obrigat√≥rios ausentes');
    return res.status(400).json({ message: 'URL da API Evolution e Chave API Global s√£o obrigat√≥rias.' });
  }

  try {
    console.log('üîç [EVOLUTION SETTINGS] Buscando configura√ß√£o existente...');
    // Buscar configura√ß√£o existente
    const existingSettings = await prisma.evolutionSettings.findFirst();
    console.log('üìä [EVOLUTION SETTINGS] Configura√ß√£o existente:', existingSettings ? `ID: ${existingSettings.id}` : 'NENHUMA');
    
    let settings;
    if (existingSettings) {
      console.log('üîÑ [EVOLUTION SETTINGS] Atualizando configura√ß√£o existente...');
      // Atualizar configura√ß√£o existente
      settings = await prisma.evolutionSettings.update({
        where: {
          id: existingSettings.id,
        },
        data: {
          baseUrl: ev_api_url,
          apiKeyGlobal: ev_api_key_global,
        },
      });
      console.log('‚úÖ [EVOLUTION SETTINGS] Configura√ß√£o atualizada com sucesso');
    } else {
      console.log('üÜï [EVOLUTION SETTINGS] Criando nova configura√ß√£o...');
      // Criar nova configura√ß√£o global
      settings = await prisma.evolutionSettings.create({
        data: {
          baseUrl: ev_api_url,
          apiKeyGlobal: ev_api_key_global,
        },
      });
      console.log('‚úÖ [EVOLUTION SETTINGS] Nova configura√ß√£o criada com sucesso');
    }

    console.log('üéâ [EVOLUTION SETTINGS] Processo conclu√≠do - enviando resposta');
    res.status(201).json(settings);
  } catch (error) {
    console.error('üí• [EVOLUTION SETTINGS] Erro ao salvar configura√ß√µes:', error);
    res.status(500).json({ message: 'Erro do servidor ao salvar configura√ß√µes.' });
  }
};

module.exports = {
  getEvolutionSettings,
  upsertEvolutionSettings,
};