const { PrismaClient } = require('@prisma/client');
const jwt = require('jsonwebtoken');
const prisma = new PrismaClient();

async function checkUserStatus() {
  try {
    console.log('üîç Verificando status do usu√°rio...');
    
    // Buscar usu√°rio no banco
    const user = await prisma.user.findUnique({
      where: {
        email: 'marcelocardosoleal@gmail.com'
      }
    });
    
    if (!user) {
      console.log('‚ùå Usu√°rio n√£o encontrado');
      return;
    }
    
    console.log('üë§ Usu√°rio no banco de dados:', {
      id: user.id,
      email: user.email,
      name: user.name,
      isAdmin: user.isAdmin,
      createdAt: user.createdAt,
      updatedAt: user.updatedAt
    });
    
    // Gerar novo token com as permiss√µes atualizadas
    const newToken = jwt.sign(
      { 
        id: user.id, 
        email: user.email, 
        isAdmin: user.isAdmin 
      },
      process.env.JWT_SECRET || 'your-secret-key',
      { expiresIn: '7d' }
    );
    
    console.log('üîë Novo token gerado:', {
      tokenLength: newToken.length,
      payload: jwt.decode(newToken)
    });
    
    console.log('\nüìã INSTRU√á√ïES PARA O USU√ÅRIO:');
    console.log('1. Fa√ßa logout do painel');
    console.log('2. Fa√ßa login novamente com suas credenciais');
    console.log('3. Isso atualizar√° o token com as novas permiss√µes de admin');
    console.log('\n‚úÖ Ap√≥s o login, voc√™ poder√° salvar as configura√ß√µes da Evolution API');
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar usu√°rio:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkUserStatus();