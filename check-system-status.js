const prisma = require('./backend/prisma/db');

async function checkSystemStatus() {
  try {
    console.log('üîç VERIFICANDO STATUS DO SISTEMA');
    console.log('=' .repeat(50));
    
    // 1. Verificar se o backend est√° rodando
    console.log('\n1Ô∏è‚É£ Verificando Backend...');
    console.log('‚ö†Ô∏è  Para verificar se o backend est√° rodando:');
    console.log('   - Acesse: http://localhost:5000');
    console.log('   - Ou execute: cd backend && npm start');
    
    // 2. Verificar conex√£o com banco de dados
    console.log('\n2Ô∏è‚É£ Verificando Banco de Dados...');
    try {
      await prisma.$connect();
      const instanceCount = await prisma.instance.count();
      console.log(`‚úÖ Banco de dados conectado - ${instanceCount} inst√¢ncias`);
    } catch (error) {
      console.log('‚ùå Erro na conex√£o com banco de dados:', error.message);
    }
    
    // 3. Verificar configura√ß√µes da Evolution API
    console.log('\n3Ô∏è‚É£ Verificando Evolution API...');
    const evolutionSettings = await prisma.evolutionSettings.findFirst();
    
    if (evolutionSettings) {
      console.log(`‚úÖ Base URL: ${evolutionSettings.baseUrl}`);
      console.log(`‚úÖ API Key: ${evolutionSettings.apiKeyGlobal ? 'Configurada' : 'N√ÉO CONFIGURADA'}`);
      
      // Testar conex√£o com Evolution API
      console.log('‚ö†Ô∏è  Para testar Evolution API manualmente:');
      console.log(`   - URL: ${evolutionSettings.baseUrl}/instance/fetchInstances`);
      console.log('   - Use o script fix-sync-problem.js para teste completo');
    } else {
      console.log('‚ùå Configura√ß√µes da Evolution API n√£o encontradas');
    }
    
    // 4. Verificar status das inst√¢ncias
    console.log('\n4Ô∏è‚É£ Verificando Inst√¢ncias...');
    const instances = await prisma.instance.findMany();
    
    if (instances.length === 0) {
      console.log('üì≠ Nenhuma inst√¢ncia encontrada');
    } else {
      console.log(`üì± Total de inst√¢ncias: ${instances.length}`);
      
      const statusCount = {};
      instances.forEach(instance => {
        statusCount[instance.status] = (statusCount[instance.status] || 0) + 1;
      });
      
      Object.entries(statusCount).forEach(([status, count]) => {
        const emoji = status === 'connected' ? '‚úÖ' : status === 'disconnected' ? '‚ùå' : '‚ö†Ô∏è';
        console.log(`   ${emoji} ${status}: ${count}`);
      });
    }
    
    // 5. Verificar webhooks
    console.log('\n5Ô∏è‚É£ Verificando Webhooks...');
    const instancesWithWebhook = instances.filter(i => i.webhookUrl);
    const instancesWithoutWebhook = instances.filter(i => !i.webhookUrl);
    
    console.log(`‚úÖ Com webhook: ${instancesWithWebhook.length}`);
    console.log(`‚ùå Sem webhook: ${instancesWithoutWebhook.length}`);
    
    if (instancesWithoutWebhook.length > 0) {
      console.log('   Inst√¢ncias sem webhook:');
      instancesWithoutWebhook.forEach(i => console.log(`   - ${i.instanceName}`));
    }
    
    // 6. Resumo e recomenda√ß√µes
    console.log('\n' + '=' .repeat(50));
    console.log('üìä RESUMO DO SISTEMA');
    console.log('=' .repeat(50));
    
    console.log('\nüîß SISTEMA DE SINCRONIZA√á√ÉO:');
    console.log('‚úÖ Sincroniza√ß√£o autom√°tica: ATIVA (a cada 2 minutos)');
    console.log('‚úÖ Script de corre√ß√£o manual: fix-sync-system.js');
    console.log('‚úÖ Script de diagn√≥stico: fix-sync-problem.js');
    
    console.log('\n‚ö†Ô∏è  LIMITA√á√ïES IDENTIFICADAS:');
    console.log('- Webhooks n√£o funcionam com localhost (Evolution API remota)');
    console.log('- Depend√™ncia da sincroniza√ß√£o autom√°tica para manter status atualizado');
    
    console.log('\nüí° SOLU√á√ïES IMPLEMENTADAS:');
    console.log('1. Sincroniza√ß√£o autom√°tica a cada 2 minutos');
    console.log('2. Scripts de corre√ß√£o manual dispon√≠veis');
    console.log('3. Monitoramento e diagn√≥stico automatizado');
    
    console.log('\nüéØ PR√ìXIMOS PASSOS (opcionais):');
    console.log('1. Para webhooks em tempo real: usar ngrok ou servidor p√∫blico');
    console.log('2. Para monitoramento: executar check-system-status.js regularmente');
    console.log('3. Para corre√ß√µes: executar fix-sync-system.js quando necess√°rio');
    
    console.log('\n‚úÖ CONCLUS√ÉO: Sistema funcional com sincroniza√ß√£o autom√°tica ativa!');
    
  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkSystemStatus();