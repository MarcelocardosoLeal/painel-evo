const { PrismaClient } = require('@prisma/client');
const axios = require('axios');
const https = require('https');

const prisma = new PrismaClient();

// Agente HTTPS para ignorar erros SSL
const httpsAgent = new https.Agent({
  rejectUnauthorized: false
});

async function fixMarceloSync() {
  try {
    console.log('üîß Corrigindo sincroniza√ß√£o da inst√¢ncia Marcelo...');
    
    // 1. Buscar configura√ß√µes da Evolution API
    const config = await prisma.evolutionSettings.findFirst();
    if (!config || !config.baseUrl) {
      console.error('‚ùå Configura√ß√µes da Evolution API n√£o encontradas!');
      return;
    }
    
    console.log(`üìã URL da API: ${config.baseUrl}`);
    console.log(`üîë API Key: ${config.globalApiKey ? '***configurada***' : 'N√ÉO CONFIGURADA'}`);
    
    if (!config.globalApiKey) {
      console.error('‚ùå API Key n√£o configurada!');
      return;
    }
    
    // 2. Listar todas as inst√¢ncias da Evolution API
    console.log('\nüîç Buscando inst√¢ncias na Evolution API...');
    
    const response = await axios.get(`${config.baseUrl}/instance/fetchInstances`, {
      headers: {
        'apikey': config.globalApiKey,
        'Content-Type': 'application/json'
      },
      httpsAgent,
      timeout: 10000
    });
    
    console.log(`üìã Encontradas ${response.data.length} inst√¢ncias na Evolution API:`);
    
    // 3. Analisar cada inst√¢ncia
    response.data.forEach((item, index) => {
      console.log(`\n${index + 1}. Inst√¢ncia:`);
      console.log(`   - ID: ${item.instanceId || 'N/A'}`);
      console.log(`   - Nome: ${item.instanceName || item.instance?.instanceName || 'N/A'}`);
      console.log(`   - Status: ${item.connectionStatus || item.instance?.status || 'N/A'}`);
      console.log(`   - Owner: ${item.instance?.owner || 'N/A'}`);
      console.log(`   - Profile: ${item.instance?.profileName || 'N/A'}`);
      
      // Verificar se √© a inst√¢ncia Marcelo
      const instanceName = item.instanceName || item.instance?.instanceName;
      if (instanceName && instanceName.toLowerCase().includes('marcelo')) {
        console.log(`   ‚≠ê ENCONTRADA INST√ÇNCIA MARCELO!`);
      }
    });
    
    // 4. Buscar inst√¢ncia local
    const localInstance = await prisma.instance.findFirst({
      where: { instanceName: 'Marcelo' }
    });
    
    if (localInstance) {
      console.log(`\nüì± Inst√¢ncia local encontrada:`);
      console.log(`   - ID: ${localInstance.id}`);
      console.log(`   - Nome: ${localInstance.instanceName}`);
      console.log(`   - Status: ${localInstance.status}`);
      console.log(`   - Evolution ID: ${localInstance.evolutionInstanceId}`);
    }
    
    // 5. Tentar encontrar uma inst√¢ncia conectada para sincronizar
    const connectedInstance = response.data.find(item => {
      const status = item.connectionStatus || item.instance?.status;
      return status === 'open' || status === 'connected';
    });
    
    if (connectedInstance && localInstance) {
      const instanceName = connectedInstance.instanceName || connectedInstance.instance?.instanceName || connectedInstance.instanceId;
      const status = connectedInstance.connectionStatus || connectedInstance.instance?.status;
      
      console.log(`\nüîÑ Atualizando inst√¢ncia local com dados da inst√¢ncia conectada:`);
      console.log(`   - Nome/ID: ${instanceName}`);
      console.log(`   - Status: ${status}`);
      
      await prisma.instance.update({
        where: { id: localInstance.id },
        data: {
          instanceName: instanceName,
          evolutionInstanceId: instanceName,
          status: 'connected'
        }
      });
      
      console.log('‚úÖ Inst√¢ncia atualizada com sucesso!');
    } else {
      console.log('\n‚ö†Ô∏è Nenhuma inst√¢ncia conectada encontrada na Evolution API');
    }
    
    // 6. Verificar resultado final
    const updatedInstance = await prisma.instance.findFirst({
      where: { id: localInstance?.id }
    });
    
    if (updatedInstance) {
      console.log(`\nüìã Status final da inst√¢ncia:`);
      console.log(`   - Nome: ${updatedInstance.instanceName}`);
      console.log(`   - Status: ${updatedInstance.status}`);
      console.log(`   - Evolution ID: ${updatedInstance.evolutionInstanceId}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir sincroniza√ß√£o:', error.message);
    if (error.response) {
      console.error('   Resposta da API:', error.response.status, error.response.data);
    }
  } finally {
    await prisma.$disconnect();
  }
}

fixMarceloSync();