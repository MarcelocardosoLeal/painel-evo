const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function setupEvolutionConfig() {
  try {
    console.log('üîß Configurando Evolution API...');
    
    // Verificar se j√° existe configura√ß√£o
    const existing = await prisma.evolutionSettings.findFirst();
    
    if (existing) {
      console.log('‚úÖ Configura√ß√µes da Evolution API j√° existem:');
      console.log(`   üìç Base URL: ${existing.baseUrl}`);
      console.log(`   üîë API Key: ***configurada***`);
      return;
    }
    
    // Criar configura√ß√£o padr√£o
    const config = await prisma.evolutionSettings.create({
      data: {
        baseUrl: 'http://localhost:8080',
        apiKeyGlobal: 'B6D711FCDE4D4FD5936544120E713976' // API Key padr√£o da Evolution
      }
    });
    
    console.log('‚úÖ Configura√ß√µes da Evolution API criadas com sucesso!');
    console.log(`   üìç Base URL: ${config.baseUrl}`);
    console.log(`   üîë API Key: ***configurada***`);
    console.log('');
    console.log('‚ö†Ô∏è  IMPORTANTE:');
    console.log('   1. Verifique se a Evolution API est√° rodando na URL configurada');
    console.log('   2. Confirme se a API Key est√° correta');
    console.log('   3. Acesse o painel admin para ajustar as configura√ß√µes se necess√°rio');
    
  } catch (error) {
    console.error('‚ùå Erro ao configurar Evolution API:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

setupEvolutionConfig();