- Email: admin@example.com
- Senha: password123


api global 0417bf43b0a8669bd6635bcb49d783df

Claro! Vou gerar novamente a documentação com os requisitos funcionais, incorporando a nota técnica sobre a Baileys/Evolution API para dar o contexto completo.

---

**Documento de Requisitos Funcionais para Plataforma de Gerenciamento de Instâncias WhatsApp**

**Visão Geral do Aplicativo:**
Uma aplicação web que permite aos usuários (seus clientes) se registrarem, fazerem login e, através de uma interface gráfica, criarem, gerenciarem e utilizarem instâncias individuais do WhatsApp. Essas instâncias são conectadas a um servidor central da Evolution API (gerenciado pelo administrador da plataforma). O sistema deve garantir total isolamento das instâncias entre diferentes usuários.

**Nota Técnica Importante sobre a Dependência Subjacente (Evolution API / Baileys):**

A solução de backend (Evolution API) que será consumida por esta plataforma utiliza, em sua essência, bibliotecas como a **Baileys (Multi Device)** para a comunicação com o WhatsApp. Isso implica que:

*   **Estabilidade:** A funcionalidade da plataforma está sujeita à estabilidade e às atualizações dessas bibliotecas subjacentes, que podem ser afetadas por mudanças no protocolo do WhatsApp. O sistema deve ser projetado considerando a possibilidade de necessidade de atualizações frequentes na camada de integração com a Evolution API e potenciais períodos de instabilidade.
*   **Riscos de Uso:** O uso de APIs não oficiais baseadas em engenharia reversa do WhatsApp (como as que utilizam Baileys) carrega riscos inerentes, incluindo a possibilidade de **banimento de contas do WhatsApp** pelos sistemas da Meta. Embora o objetivo desta plataforma seja fornecer uma interface de gerenciamento, o risco subjacente da tecnologia de conexão com o WhatsApp persiste e deve ser comunicado aos usuários finais, se aplicável.
*   **Limitações de Recursos:** As funcionalidades passíveis de serem implementadas na plataforma podem ser limitadas pelos recursos suportados pela Evolution API e, consequentemente, pela Baileys.
*   **Manutenção:** Será crucial monitorar o status da integração com a Evolution API e estar preparado para atualizações da mesma para manter a compatibilidade com o WhatsApp.

---

**I. Gerenciamento de Contas de Usuário (Clientes da Plataforma):**

1.  **Registro de Novo Usuário:**
    *   O sistema deve permitir que um novo visitante se registre fornecendo informações como nome, e-mail e senha.
    *   O sistema deve validar os dados de entrada (ex: formato do e-mail, complexidade mínima da senha, campos obrigatórios).
    *   O sistema deve garantir que o endereço de e-mail fornecido seja único na plataforma.
    *   Após o registro bem-sucedido, o sistema deve autenticar o usuário ou direcioná-lo para a tela de login.
2.  **Login de Usuário:**
    *   O sistema deve permitir que um usuário registrado faça login utilizando seu e-mail e senha.
    *   O sistema deve validar as credenciais fornecidas contra os registros armazenados.
    *   Em caso de sucesso, o sistema deve criar uma sessão autenticada para o usuário, concedendo acesso às funcionalidades de gerenciamento de instâncias.
    *   Em caso de falha na autenticação, o sistema deve informar ao usuário de forma genérica (ex: "e-mail ou senha inválidos") sem revelar qual campo está incorreto.
3.  **Logout de Usuário:**
    *   O sistema deve permitir que um usuário logado encerre sua sessão ativa de forma segura, invalidando seu token de acesso.
4.  **(Opcional, mas recomendado) Recuperação de Senha:**
    *   O sistema deve fornecer um mecanismo para que usuários que esqueceram suas senhas possam solicitar a redefinição. Isso geralmente envolve o envio de um link ou código de redefinição para o e-mail cadastrado.

**II. Gerenciamento de Instâncias do WhatsApp (pelo Usuário Logado):**

1.  **Criação de Nova Instância do WhatsApp:**
    *   O sistema deve permitir que o usuário logado inicie o processo de criação de uma nova instância do WhatsApp.
    *   O sistema (componente de backend da plataforma) deve interagir com o servidor Evolution API configurado para provisionar uma nova instância em nome do usuário.
    *   O sistema deve associar a instância recém-criada na Evolution API ao ID do usuário logado na plataforma.
    *   O sistema deve obter e apresentar ao usuário o QR Code fornecido pela Evolution API para que ele possa escanear com seu aplicativo WhatsApp e conectar seu telefone.
    *   O sistema deve exibir o status inicial da instância (ex: "Aguardando leitura do QR Code", "Gerando QR Code").
2.  **Listagem de Instâncias do WhatsApp:** `(Implementado)`
    *   O sistema deve exibir ao usuário logado uma lista de todas as instâncias do WhatsApp que ele criou e que estão associadas à sua conta na plataforma.
    *   Para cada instância na lista, o sistema deve exibir informações chave, como:
        *   Um nome ou identificador amigável para a instância (pode ser definido pelo usuário durante a criação ou gerado automaticamente).
        *   O status atual da conexão da instância com o WhatsApp (ex: "Conectado", "Desconectado", "Aguardando QR Code", "Falha na Autenticação", "Dispositivo Desconectado").
        *   ID da Instância na Evolution API.
    *   O sistema deve garantir, por meio da lógica de backend, que um usuário possa visualizar e interagir APENAS com suas próprias instâncias.
3.  **Visualização do Status Detalhado da Instância:**
    *   O sistema deve permitir que o usuário verifique o status de conexão de uma instância específica. Essa verificação pode ser em tempo real (via polling ou WebSockets, se a Evolution API suportar) ou com atualizações periódicas.
4.  **Reconexão de Instância (Obter Novo QR Code):**
    *   Caso uma instância esteja desconectada ou sua sessão tenha expirado (exigindo nova leitura de QR Code), o sistema deve permitir que o usuário solicite a geração e visualização de um novo QR Code para essa instância específica, interagindo com a Evolution API.
5.  **Desconexão de Instância (Logout da Sessão WhatsApp):**
    *   O sistema deve permitir que o usuário solicite a desconexão de uma instância específica. Isso deve instruir a Evolution API a encerrar a sessão do WhatsApp associada àquela instância.
    *   A instância deve permanecer na lista do usuário, mas seu status deve ser atualizado para "Desconectado".
6.  **Exclusão de Instância:**
    *   O sistema deve permitir que o usuário solicite a exclusão permanente de uma de suas instâncias do WhatsApp.
    *   O sistema deve solicitar uma confirmação explícita do usuário antes de proceder com a exclusão.
    *   Após a confirmação, o sistema (backend) deve instruir a Evolution API a remover/deletar a instância correspondente e também remover o registro da instância do banco de dados da plataforma.

**III. Interação com Instâncias do WhatsApp (Funcionalidades Básicas - Podem ser Pós-MVP):**

1.  **(Opcional) Envio de Mensagens de Texto:**
    *   O sistema deve permitir que o usuário, através da interface da plataforma, envie mensagens de texto simples utilizando uma de suas instâncias conectadas para um número de WhatsApp de destino.
2.  **(Opcional) Envio de Mensagens de Mídia:**
    *   O sistema deve permitir que o usuário envie mensagens contendo arquivos de mídia (como imagens, áudios, vídeos, documentos) através de uma instância conectada, utilizando as capacidades da Evolution API.
3.  **(Opcional) Configuração de Webhooks por Instância:**
    *   O sistema pode permitir que o usuário configure uma URL de webhook para uma instância específica. A Evolution API então enviaria eventos (como recebimento de novas mensagens) para essa URL.

**IV. Administração da Plataforma (Funcionalidades para o Administrador da Plataforma - Geralmente em um painel de administração separado ou interface de backend):**

1.  **Configuração da Conexão com a Evolution API:**
    *   O sistema (componente de backend) deve permitir ao administrador da plataforma configurar e armazenar de forma segura a URL base e a API Key Global do servidor principal da Evolution API que será utilizado por todos os usuários.
2.  **Gerenciamento de Usuários da Plataforma:**
    *   O administrador deve ter a capacidade de listar todas as contas de usuários registradas na plataforma.
    *   O administrador deve poder visualizar detalhes de usuários específicos.
    *   (Opcional) O administrador pode ter funcionalidades para ativar/desativar contas de usuários ou modificar seus perfis/limites.
3.  **(Opcional) Monitoramento Global de Instâncias:**
    *   O administrador pode ter uma visão agregada (sem expor dados sensíveis de mensagens) de todas as instâncias criadas na plataforma, seu status geral, e a qual usuário pertencem, para fins de suporte técnico, monitoramento da saúde do sistema e alocação de recursos.

**V. Requisitos Não Funcionais Essenciais (Características de Qualidade):**

1.  **Segurança:**
    *   Implementação de medidas para proteger contra vulnerabilidades web comuns (ex: XSS, CSRF, SQL Injection).
    *   Armazenamento seguro de credenciais de usuários (senhas devem ser hasheadas e salgadas).
    *   Uso obrigatório de HTTPS para toda a comunicação.
    *   Garantia de isolamento de dados e sessões entre diferentes usuários (arquitetura multi-tenant robusta).
2.  **Usabilidade:**
    *   Interface de usuário intuitiva, clara e de fácil navegação.
    *   Fornecimento de feedback visual e textual claro ao usuário sobre o resultado de suas ações e o status das operações.
    *   Design responsivo, garantindo uma boa experiência de uso em diferentes dispositivos (desktops, tablets, smartphones).
3.  **Desempenho:**
    *   Tempos de resposta rápidos e eficientes para as interações do usuário.
    *   Capacidade do backend de lidar com um volume crescente de usuários e instâncias de forma eficaz (considerações de escalabilidade).
4.  **Confiabilidade:**
    *   O sistema deve operar de forma consistente e com alta disponibilidade.
    *   Tratamento de erros gracioso, tanto para erros internos da plataforma quanto para erros provenientes da comunicação com a Evolution API, com mensagens informativas para o usuário quando apropriado.

---

Espero que esta versão mais completa e contextualizada seja ainda mais útil para a IA desenvolver o projeto!

---

**VI. Acompanhamento do Desenvolvimento e Próximos Passos:**

**Funcionalidades Implementadas e Corretas:**

1.  **Interface do Dashboard (`Dashboard.vue`):**
    *   **Listagem de Instâncias:** A funcionalidade de listar as instâncias existentes está implementada e buscando os dados do backend.
    *   **Botão "Gerar QR Code":** O texto do botão de conexão da instância foi alterado de "Conectar" para "Gerar QR Code" para melhor clareza.
    *   **Modal de QR Code (Estilização):**
        *   A cor de fundo do modal foi alterada para `#f0f0f0` (cinza claro) para melhorar a visibilidade.
        *   A largura máxima do modal foi ajustada para `380px`.
        *   A borda do modal foi suavizada para `1px solid #ccc`.
        *   O botão de fechar ("X") do modal foi estilizado para melhor visibilidade e usabilidade:
            *   Cor do ícone: `#333` (cinza escuro).
            *   Posicionamento: `top: 10px`, `right: 10px` (relativo ao conteúdo do modal).
            *   Fundo: Circular, branco translúcido (`rgba(255, 255, 255, 0.7)`).
            *   Tamanho: `30px` de largura e altura.
            *   Alinhamento do "X": Centralizado.
            *   Cursor: `pointer`.
            *   `z-index: 2` para garantir que fique sobre outros elementos.

**Pendências e Correções:**

1.  **Erro ao Buscar QR Code:**
    *   **Problema:** O painel local exibe a mensagem "Erro ao buscar QR Code para a instância [nome_da_instancia]" mesmo quando a Evolution API aparentemente gera o QR Code corretamente.
    *   **Investigação Necessária:** É crucial analisar os logs do backend (Node.js) e a aba "Network" do navegador no momento em que o erro ocorre. Precisamos verificar:
        *   A requisição exata que o frontend faz ao backend para obter o QR Code.
        *   A requisição que o backend faz à Evolution API.
        *   A resposta da Evolution API ao backend.
        *   Como o backend processa essa resposta e a envia para o frontend.
        *   O Status Code e o corpo da resposta da requisição de "Gerar QR Code" na aba Network do navegador.
    *   **Possíveis Causas:** Problemas na URL da API, chave da API, tratamento da resposta da Evolution API no backend, ou como o frontend está tentando exibir o QR Code (ex: esperando um formato de dados diferente do que está sendo retornado).

**Status Atual do Banco de Dados (Prisma Studio - 13/06/2025):**

Análise da imagem do Prisma Studio em `http://localhost:5555`:

1.  **Tabelas Criadas com Sucesso:**
    *   ✅ `User` - 0 registros (tabela vazia)
    *   ✅ `EvolutionSettings` - 0 registros (tabela vazia)
    *   ✅ `Instance` - 0 registros (tabela vazia)

2.  **Schema Simplificado Aplicado:**
    *   ✅ Migração `simplify_schema` executada com sucesso
    *   ✅ Estrutura do banco de dados limpa e focada apenas nas tabelas necessárias
    *   ✅ Remoção das tabelas antigas do exemplo PHP concluída

3.  **Problemas Identificados:**
    *   ❌ **Usuário Admin não está no banco:** Apesar do script `seedAdmin.js` ter sido executado com sucesso (conforme logs do terminal), o usuário administrador não aparece na tabela `User` do Prisma Studio
    *   ❌ **Configurações da Evolution API ausentes:** A tabela `EvolutionSettings` está vazia, explicando o erro "API Key da Evolution não configurada" no backend
    *   ❌ **Nenhuma instância criada:** A tabela `Instance` está vazia, o que é esperado já que ainda não foram criadas instâncias pelos usuários

**Diagnóstico e Próximos Passos:**

1.  **URGENTE - Investigar Problema do Seed Admin:**
    *   O script `seedAdmin.js` reportou sucesso, mas o usuário não está visível no Prisma Studio
    *   Possíveis causas:
        *   Problema de conexão com o banco durante o seed
        *   Erro silencioso no script de seed
        *   Problema de sincronização entre o Prisma Client e o banco
    *   **Ação:** Re-executar o script de seed e verificar se há erros de conexão

2.  **Configurar Evolution API Settings:**
    *   Criar um registro inicial na tabela `EvolutionSettings` com:
        *   `baseUrl`: URL da Evolution API
        *   `apiKey`: Chave global da API (mencionada na documentação: `0417bf43b0a8669bd6635bcb49d783df`)
    *   **Ação:** Criar script ou endpoint para configuração inicial da Evolution API

3.  **Testar Criação de Usuário:**
    *   Verificar se o endpoint de registro de usuários está funcionando
    *   Testar criação manual de usuário via API ou Prisma Studio

4.  **Validar Conectividade do Backend:**
    *   Confirmar se o backend está conectando corretamente ao banco de dados
    *   Verificar se as variáveis de ambiente estão configuradas corretamente

5.  **Próximas Implementações (após resolver os problemas acima):**
    *   Implementar funcionalidade de criação de instâncias
    *   Desenvolver integração com Evolution API
    *   Criar interface de administração para configurações

**Conclusão:**
O schema do banco está correto e as tabelas foram criadas com sucesso. O problema principal é que os dados não estão sendo persistidos corretamente, começando pelo usuário administrador que deveria ter sido criado pelo script de seed.